<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\Mapping\ClassMetadata;
use AppBundle\Entity\Article; 
use AppBundle\Entity\Hobby;
use AppBundle\Entity\HobbyCategory;
use Doctrine\ORM\Tools\Pagination\Paginator;
use triguk\AuthorizationBundle\Repository\SimplePaginatorInterface;
use triguk\AuthorizationBundle\Repository\SimplePaginatorTrait;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends \Doctrine\ORM\EntityRepository implements SimplePaginatorInterface
{
    use SimplePaginatorTrait;
    protected $manager;
    
    public function __construct(EntityManager $manager, ClassMetadata $classMetadata)
    {
        parent::__construct($manager,$classMetadata);
        $this->manager=$manager;
    }    
    
    public function delete($article)
    {
        $comments=$article->getComments();
        
        foreach($comments as $comment)
            $this->manager->remove($comment);
            
        $this->manager->remove($article);
        $this->manager->flush();
    }
    
    public function getArticlePaginator($page=1,$pageSize=5,
        HobbyCategory $hobbyCategory=null,Hobby $hobby=null)
    {

        $query = $this->manager
            ->createQueryBuilder('a')
            ->select('a','h','c','ua','ue')
            ->from('AppBundle:Article','a')
            //->orderBy('a.dateCreated', 'DESC')
            ->join('a.hobbies','h')
            ->join('a.author','ua')
            ->leftJoin('a.editor','ue')
            ->join('h.hobbyCategory','c');
            
            
        if ($hobbyCategory && !$hobby)
        {
            $query = $query
                ->where('h.hobbyCategory = :hobbyCategory')
                ->setParameter('hobbyCategory', $hobbyCategory);
        }
        if (!$hobbyCategory && $hobby)
        {
            $query = $query
                ->where('h.id = :hobby_id')
                ->setParameter('hobby_id', $hobby->getId());
        }
        if ($hobbyCategory && $hobby)
        {
            $query = $query
                ->where('h.hobbyCategory = :hobbyCategory')
                ->andWhere('h.id = :hobby_id')
                ->setParameter('hobby_id', $hobbyCategory->getId());
        }

        
        $query=$query
            
            ->setFirstResult($pageSize * ($page-1))
            ->setMaxResults($pageSize);        
    
        $paginator = new Paginator($query);
        if ($page>1)
        {
            $paginator
                ->getQuery()
                ->setFirstResult($pageSize * ($page-1)) 
                ->setMaxResults($pageSize);
        }   
        return $paginator;
    }    

    
}
